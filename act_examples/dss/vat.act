// contract Vat

// ilk  : bytes32 -> {Art : uint256,
//                    rate : uint256,
//                    spot : uint256,
//                    line : uint256,
//                    dust : uint256}
// urn  : bytes32 -> {ink : uint256,
//                    art : uint256}
// Line : uint256
// live : uint256
// can  : address -> address -> uint256
// gem  : bytes32 -> address -> uint256
// debt : uint256
// dai  : address -> uint256

behaviour frob of Vat
interface frob(bytes32 i, address u, address v, address w, int dink, int dart)

iff in range uint256

    urns[i][u].ink + dink
    urns[i][u].art + dart
    ilks[i].Art    + dart
    (ilks[i].Art + dart) * ilks[i].rate
    dai[w] + (ilks[i].rate * dart)
    debt + (ilks[i].rate * dart)

iff in range int256

    ilks[i].rate
    ilks[i].rate * dart

iff
    CALLVALUE == 0
    live == 1
    ilks[i].rate =/= 0
    dart <= 0 or ((ilks[i].art + dart) * ilks[i].rate <= ilks[i].line and debt + ilks[i].rate * dart <= line)
    (dart <= 0) or (((ilks[i].Art + dart) * ilks[i].rate <= ilks[i].line) and ((debt + ilks[i].rate * dart) <= line))
    (dart <= 0 and dink >= 0) or (((urns[i][u].art + dart) * ilks[i].rate) <= ((urns[i][u].ink + dink) * ilks[i].spot))
    (dart <= 0 and dink >= 0) or (u == CALLER or can[u][CALLER] == 1)

    (dink <= 0) or (v == CALLER or Can[v][CALLER] == 1)
    (dart >= 0) or (w == CALLER or Can[w][CALLER] == 1)

storage

    urns[i][u].ink => urns[i][u].ink + dink
    urns[i][u].art => urns[i][u].art + dart
    ilks[i].Art    => ilks[i].Art + dart
    gem[i][v]      => gem[i][v]   - dink
    dai[w]         => dai[w] + ilks[i].rate * dart
    debt           => debt   + ilks[i].rate * dart
